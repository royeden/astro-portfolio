---
import normalizeAstroClassListProps from "~utils/normalizeAstroClassListProps";

export interface Props extends astroHTML.JSX.HTMLAttributes {
  transitionName?: string;
}

const {
  classList,
  transitionName = "name",
  ...props
} = normalizeAstroClassListProps(Astro.props as Props);
---

<>
  <main data-router-wrapper data-wrapper class="w-full">
    <div
      {...props}
      class:list={[classList, "bg-black/20"]}
      data-router-view={transitionName}
      role="region"
      aria-atomic="true"
      aria-live="polite"
    >
      <slot />
    </div>
  </main>
  <!-- <script>
    // TODO use this instead of highway because it handles types
    // https://github.com/okikio/native/blob/beta/docs/native/index.md
    // https://github.com/okikio/native/blob/beta/docs/native/api.md#transitionmanager
    import {
      App,
      PJAX,
      TransitionManager,
      HistoryManager,
      PageManager,
      Router,
      ITransitionData,
    } from "@okikio/native";
    const app = new App();

    //= Fade Transition
    const Fade = {
      name: "default",

      // Fade Out Old Page
      out({ from, done }: ITransitionData) {
        let fromWrapper = from.wrapper;
        return done();

        // return fromWrapper.animate()
      },

      // Fade In New Page
      async in({ to, done }: ITransitionData) {
        let toWrapper = to.wrapper;
        return done();

        // await animate({
        //   target: toWrapper,
        //   opacity: [0, 1],
        //   duration: 500,
        // });
      },
    };

    app
      // Note only these 3 Services must be set under the names specified
      .set("HistoryManager", new HistoryManager())
      .set("PageManager", new PageManager())
      .set("TransitionManager", new TransitionManager([["default", Fade]]))

      // The names of these Services don't really matter
      .set("Router", new Router())
      .add(new PJAX());

    console.log((app.get("TransitionManager") as TransitionManager).config);

    try {
      // Router is a router, depending on the page path it will run certain tasks
      // It support regexp and paths that `path-to-regex` supports,
      // however, I might refactor it to use the new `URLPattern` web standard in a future update.
      // `URLPattern` accomplishes the same goal in a similar way to `path-to-regex` without needing to install `path-to-regex`.
      // I suggest learning more about `URLPattern` on https://web.dev/urlpattern/

      // Note these events are emitted by the PJAX Service
      app.on({
        // etc...
      });

      // While this event is emitted by the App
      // app.on("resize", () => {
      //   console.log("App resizing");
      // });

      app.boot();
    } catch (e) {
      console.warn(e);
    }
  </script> -->
  <script>
    import { setupPageTransitions } from "~utils/page-transitions";

    setupPageTransitions();
  </script>
</>
