---
import normalizeAstroClassListProps from "~utils/normalizeAstroClassListProps";

export interface Props extends astroHTML.JSX.HTMLAttributes {
  open?: boolean;
  items: astroHTML.JSX.Element[];
}

const { classList, items, ...props } = normalizeAstroClassListProps(
  Astro.props as Props
);
---

<details {...props} class:list={[classList]}>
  <summary class="group cursor-pointer focus:outline-none py-2">
    <span
      class="font-bold rounded-md transition duration-300 group-focus-visible:ring group-focus-visible:ring-white group-focus-visible:ring-opacity-80 group-focus-visible:group-hover:ring-opacity-100 w-full p-0.5"
    >
      <slot />
    </span>
  </summary>
  <div class="mx-1 pt-1">
    <ul class="ml-8 list-disc space-y-2">
      {items.map((item) => <li>{item}</li>)}
    </ul>
  </div>
</details>

<script>
  // https://css-tricks.com/how-to-animate-the-details-element-using-waapi/
  class Accordion {
    el: HTMLDetailsElement;
    summary: HTMLElement;
    content: HTMLUListElement;
    animation: Animation;
    isClosing: boolean;
    isExpanding: boolean;
    constructor(el: HTMLDetailsElement) {
      // Store the <details> element
      this.el = el;
      // Store the <summary> element
      this.summary = el.querySelector("summary");
      // Store the <div class="content"> element
      this.content = el.querySelector("ul");

      // Store the animation object (so we can cancel it if needed)
      this.animation = null;
      // Store if the element is closing
      this.isClosing = false;
      // Store if the element is expanding
      this.isExpanding = false;
      // Detect user clicks on the summary element
      this.summary.addEventListener("click", (event) => this.onClick(event));
    }

    onClick(event: MouseEvent) {
      // Stop default behaviour from the browser
      event.preventDefault();
      // Add an overflow on the <details> to avoid content overflowing
      this.el.style.overflow = "hidden";
      // Check if the element is being closed or is already closed
      if (this.isClosing || !this.el.open) {
        this.open();
        // Check if the element is being openned or is already open
      } else if (this.isExpanding || this.el.open) {
        this.shrink();
      }
    }

    shrink() {
      // Set the element as "being closed"
      this.isClosing = true;

      // Store the current height of the element
      const startHeight = `${this.el.offsetHeight}px`;
      // Calculate the height of the summary
      const endHeight = `${this.summary.offsetHeight}px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      // Start a WAAPI animation
      this.animation = this.el.animate(
        {
          // Set the keyframes from the startHeight to endHeight
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "cubic-bezier(0, 0, 0.2, 1)",
        }
      );

      // When the animation is complete, call onAnimationFinish()
      this.animation.onfinish = () => this.onAnimationFinish(false);
      // If the animation is cancelled, isClosing variable is set to false
      this.animation.oncancel = () => (this.isClosing = false);
    }

    open() {
      // Apply a fixed height on the element
      this.el.style.height = `${this.el.offsetHeight}px`;
      // Force the [open] attribute on the details element
      this.el.open = true;
      // Wait for the next frame to call the expand function
      requestAnimationFrame(() => this.expand());
    }

    expand() {
      // Set the element as "being expanding"
      this.isExpanding = true;
      // Get the current fixed height of the element
      const startHeight = `${this.el.offsetHeight}px`;
      // Calculate the open height of the element (summary height + content height)
      const endHeight = `${
        this.summary.offsetHeight + this.content.offsetHeight
      }px`;

      // If there is already an animation running
      if (this.animation) {
        // Cancel the current animation
        this.animation.cancel();
      }

      // Start a WAAPI animation
      this.animation = this.el.animate(
        {
          // Set the keyframes from the startHeight to endHeight
          height: [startHeight, endHeight],
        },
        {
          duration: 300,
          easing: "cubic-bezier(0, 0, 0.2, 1)",
        }
      );
      // When the animation is complete, call onAnimationFinish()
      this.animation.onfinish = () => this.onAnimationFinish(true);
      // If the animation is cancelled, isExpanding variable is set to false
      this.animation.oncancel = () => (this.isExpanding = false);
    }

    onAnimationFinish(open: boolean) {
      // Set the open attribute based on the parameter
      this.el.open = open;
      // Clear the stored animation
      this.animation = null;
      // Reset isClosing & isExpanding
      this.isClosing = false;
      this.isExpanding = false;
      // Remove the overflow hidden and the fixed height
      this.el.style.height = this.el.style.overflow = "";
    }
  }

  document.querySelectorAll("details").forEach((el) => {
    new Accordion(el);
  });
</script>
